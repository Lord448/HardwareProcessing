
UART_LCD.elf:     file format elf32-littlenios2
UART_LCD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004188

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000798 memsz 0x00000798 flags r-x
    LOAD off    0x000017b8 vaddr 0x000047b8 paddr 0x000047ec align 2**12
         filesz 0x00000034 memsz 0x00000034 flags rw-
    LOAD off    0x00000820 vaddr 0x00004820 paddr 0x00004820 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000618  00004188  00004188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000047a0  000047a0  000017a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000034  000047b8  000047ec  000017b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00004820  00004820  00001820  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000497c  0000497c  000017ec  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00001e66  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001128  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000f5e  00000000  00000000  00004a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000002d8  00000000  00000000  000059bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000c57  00000000  00000000  00005c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  000068ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00006920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000006e3  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000010e  00000000  00000000  00007073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000064f  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00008c5e  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00008c61  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00008c6d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00008c6e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00008c6f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  00008c90  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003d  00000000  00000000  00008c95  2**0
                  CONTENTS, READONLY
 28 .jdi          000050b3  00000000  00000000  00008cd2  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00074ab6  00000000  00000000  0000dd85  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004188 l    d  .text	00000000 .text
000047a0 l    d  .rodata	00000000 .rodata
000047b8 l    d  .rwdata	00000000 .rwdata
00004820 l    d  .bss	00000000 .bss
0000497c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000041d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00004840 l     O .bss	00000001 Lows.8
0000483c l     O .bss	00000004 stages.7
00004841 l     O .bss	00000001 Highs.9
00004838 l     O .bss	00000004 WordTX.6
00004834 l     O .bss	00000001 ByteCounter.5
00004830 l     O .bss	00000004 stages.4
0000482c l     O .bss	00000004 TurnOffIncomData.3
00004828 l     O .bss	00000002 CountIncomData.2
00004824 l     O .bss	00000004 stages.1
00004820 l     O .bss	00000001 CountsDelay.0
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00004878 g     O .bss	00000004 alt_instruction_exception_handler
000045f8 g     F .text	0000002c alt_main
0000487c g     O .bss	00000100 alt_irq
00004844 g     O .bss	00000004 needToClearTX
0000485c g     O .bss	00000004 WordRX
000047ec g       *ABS*	00000000 __flash_rwdata_start
00004854 g     O .bss	00000004 PortReadTX
000047d4 g     O .rwdata	00000004 RXDataReg
00004848 g     O .bss	00000004 TXIsBusy
00004624 g     F .text	00000038 alt_putstr
000046f8 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000001c __reset
000047c4 g     O .rwdata	00000004 StartTX
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004870 g     O .bss	00000004 alt_argv
0000c7b8 g       *ABS*	00000000 _gp
0000475c g     F .text	00000028 memcpy
000047bc g     O .rwdata	00000004 ParsedLoopFlag
000046d4 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00004860 g     O .bss	00000004 pParsedLoop_IRQ
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004700 g     F .text	0000005c alt_icache_flush
00004850 g     O .bss	00000004 EndOfWordRX
0000497c g       *ABS*	00000000 __bss_end
0000450c g     F .text	00000068 alt_iic_isr_register
000044f4 g     F .text	00000018 alt_ic_irq_enabled
00004868 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
000046b0 g     F .text	00000018 alt_dcache_flush_all
000047ec g       *ABS*	00000000 __ram_rwdata_end
000047b8 g       *ABS*	00000000 __ram_rodata_end
000047e8 g     O .rwdata	00000004 jtag_uart_0
0000497c g       *ABS*	00000000 end
0000415c g     F .exceptions	0000002c alt_instruction_exception_entry
00006800 g       *ABS*	00000000 __alt_stack_pointer
00004680 g     F .text	00000030 altera_avalon_jtag_uart_write
00004188 g     F .text	0000004c _start
00004858 g     O .bss	00000001 RXCounts
000041d4 g     F .text	0000005c UART_TXRX_CpltCallback
0000467c g     F .text	00000004 alt_sys_init
000047b8 g       *ABS*	00000000 __ram_rwdata_start
000047a0 g       *ABS*	00000000 __ram_rodata_start
000047c8 g     O .rwdata	00000004 StatusLed
0000497c g       *ABS*	00000000 __alt_stack_base
000047c0 g     O .rwdata	00000004 UARTStatus
000047cc g     O .rwdata	00000004 ControlBase
00004230 g     F .text	00000008 ParsedLoopElapsedCallback
000047d8 g     O .rwdata	00000004 TXDataReg
00004820 g       *ABS*	00000000 __bss_start
00004238 g     F .text	00000248 main
0000486c g     O .bss	00000004 alt_envp
000047a0 g       *ABS*	00000000 __flash_rodata_start
0000465c g     F .text	00000020 alt_irq_init
00004874 g     O .bss	00000004 alt_argc
000047b8 g     O .rwdata	00000004 EnableReception
00004020 g       .exceptions	00000000 alt_irq_entry
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004480 g     F .text	00000004 alt_ic_isr_register
000047ec g       *ABS*	00000000 _edata
0000484c g     O .bss	00000004 DataRX
0000497c g       *ABS*	00000000 _end
00004188 g       *ABS*	00000000 __ram_exceptions_end
00004864 g     O .bss	00000004 pUART_TXRX_IRQ
000044bc g     F .text	00000038 alt_ic_irq_disable
00006800 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000401c g       .entry	00000000 _exit
000047e0 g     O .rwdata	00000004 TXLCDReg
00004784 g     F .text	0000001c strlen
000046c8 g     F .text	0000000c alt_icache_flush_all
000047e4 g     O .rwdata	00000004 alt_priority_mask
00004484 g     F .text	00000038 alt_ic_irq_enable
000047d0 g     O .rwdata	00000004 TXDataSel
000047dc g     O .rwdata	00000004 RXLDCaReg
00004574 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08506214 	ori	at,at,16776
    jmp r1
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__reset-0x4000>

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
    4094:	e93fff04 	addi	r4,ea,-4
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>
    40a0:	ebffff04 	addi	r15,ea,-4
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	84121f04 	addi	r16,r16,18556
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
      mask <<= 1;
    4150:	1806907a 	slli	r3,r3,1
      i++;
    4154:	10800044 	addi	r2,r2,1
      if (active & mask)
    4158:	003ff006 	br	411c <alt_irq_handler+0x20>

0000415c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    415c:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    4160:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    4164:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    4168:	d0e03017 	ldw	r3,-32576(gp)
    416c:	18000326 	beq	r3,zero,417c <alt_instruction_exception_entry+0x20>
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    4170:	1004d0ba 	srli	r2,r2,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4174:	110007cc 	andi	r4,r2,31
    4178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    417c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4180:	0005883a 	mov	r2,zero
    4184:	f800283a 	ret

Disassembly of section .text:

00004188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    418c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    4194:	00bffd16 	blt	zero,r2,418c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4198:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    419c:	deda0014 	ori	sp,sp,26624
    movhi gp, %hi(_gp)
    41a0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    41a4:	d6b1ee14 	ori	gp,gp,51128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    41a8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    41ac:	10920814 	ori	r2,r2,18464

    movhi r3, %hi(__bss_end)
    41b0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    41b4:	18d25f14 	ori	r3,r3,18812

    beq r2, r3, 1f
    41b8:	10c00326 	beq	r2,r3,41c8 <_start+0x40>

0:
    stw zero, (r2)
    41bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41c4:	10fffd36 	bltu	r2,r3,41bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41c8:	00045740 	call	4574 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41cc:	00045f80 	call	45f8 <alt_main>

000041d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41d0:	003fff06 	br	41d0 <alt_after_alt_main>

000041d4 <UART_TXRX_CpltCallback>:
//			 	      	ISR
//----------------------------------------------------
void UART_TXRX_CpltCallback(void* isr_context) {
	//IF RX
	//Copy the value of the port
	if(EnableReception) {
    41d4:	d0a00017 	ldw	r2,-32768(gp)
    41d8:	10001026 	beq	r2,zero,421c <UART_TXRX_CpltCallback+0x48>
		DataRX = true;
		WordRX |= (alt_u32) *RXDataReg<<(8*RXCounts);
    41dc:	d0a02803 	ldbu	r2,-32608(gp)
    41e0:	d0e00717 	ldw	r3,-32740(gp)
		DataRX = true;
    41e4:	01400044 	movi	r5,1
    41e8:	d1602515 	stw	r5,-32620(gp)
		WordRX |= (alt_u32) *RXDataReg<<(8*RXCounts);
    41ec:	19000003 	ldbu	r4,0(r3)
    41f0:	10c03fcc 	andi	r3,r2,255
    41f4:	180690fa 	slli	r3,r3,3
		RXCounts++;
    41f8:	10800044 	addi	r2,r2,1
		WordRX |= (alt_u32) *RXDataReg<<(8*RXCounts);
    41fc:	20c8983a 	sll	r4,r4,r3
    4200:	d0e02917 	ldw	r3,-32604(gp)
    4204:	1906b03a 	or	r3,r3,r4
    4208:	d0e02915 	stw	r3,-32604(gp)
		if(RXCounts > 3)
    420c:	10c03fcc 	andi	r3,r2,255
    4210:	18c00128 	cmpgeui	r3,r3,4
    4214:	1800031e 	bne	r3,zero,4224 <UART_TXRX_CpltCallback+0x50>
		RXCounts++;
    4218:	d0a02805 	stb	r2,-32608(gp)
			RXCounts = 0;
			EndOfWordRX = true;
		}
	}
	//IF TX
	TXIsBusy = false;
    421c:	d0202415 	stw	zero,-32624(gp)
}
    4220:	f800283a 	ret
			RXCounts = 0;
    4224:	d0202805 	stb	zero,-32608(gp)
			EndOfWordRX = true;
    4228:	d1602615 	stw	r5,-32616(gp)
    422c:	003ffb06 	br	421c <UART_TXRX_CpltCallback+0x48>

00004230 <ParsedLoopElapsedCallback>:

void ParsedLoopElapsedCallback(void* isr_context) { ParsedLoopFlag = false; }
    4230:	d0200115 	stw	zero,-32764(gp)
    4234:	f800283a 	ret

00004238 <main>:
{
    4238:	defffe04 	addi	sp,sp,-8
    423c:	dfc00115 	stw	ra,4(sp)
  alt_sys_init();
    4240:	000467c0 	call	467c <alt_sys_init>
  alt_irq_init(NULL);
    4244:	0009883a 	mov	r4,zero
    4248:	000465c0 	call	465c <alt_irq_init>
  alt_putstr("Hello from Nios II!\n");
    424c:	01000034 	movhi	r4,0
    4250:	2111e804 	addi	r4,r4,18336
    4254:	00046240 	call	4624 <alt_putstr>
  pUART_TXRX_IRQ = &UART_TXRX_CpltCallback;
    4258:	01800034 	movhi	r6,0
  pParsedLoop_IRQ = &ParsedLoopElapsedCallback;
    425c:	00800034 	movhi	r2,0
  pUART_TXRX_IRQ = &UART_TXRX_CpltCallback;
    4260:	31907504 	addi	r6,r6,16852
  pParsedLoop_IRQ = &ParsedLoopElapsedCallback;
    4264:	10908c04 	addi	r2,r2,16944
  alt_ic_isr_register(UART_IRQ_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ_IRQ, pUART_TXRX_IRQ,NULL ,0x0);
    4268:	000f883a 	mov	r7,zero
    426c:	01400044 	movi	r5,1
    4270:	0009883a 	mov	r4,zero
    4274:	d8000015 	stw	zero,0(sp)
  pUART_TXRX_IRQ = &UART_TXRX_CpltCallback;
    4278:	d1a02b15 	stw	r6,-32596(gp)
  pParsedLoop_IRQ = &ParsedLoopElapsedCallback;
    427c:	d0a02a15 	stw	r2,-32600(gp)
  alt_ic_isr_register(UART_IRQ_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ_IRQ, pUART_TXRX_IRQ,NULL ,0x0);
    4280:	00044800 	call	4480 <alt_ic_isr_register>
  alt_ic_isr_register(PARSEDLOOP_IRQ_IRQ_INTERRUPT_CONTROLLER_ID, PARSEDLOOP_IRQ_IRQ, pParsedLoop_IRQ,NULL ,0x0);
    4284:	d1a02a17 	ldw	r6,-32600(gp)
    4288:	d8000015 	stw	zero,0(sp)
    428c:	000f883a 	mov	r7,zero
    4290:	01400084 	movi	r5,2
    4294:	0009883a 	mov	r4,zero
    4298:	00044800 	call	4480 <alt_ic_isr_register>
	alt_u8 Read = *ControlBase&0xF;
    429c:	d0a00517 	ldw	r2,-32748(gp)
	else if(Read&(1<<3)) {
    42a0:	10800003 	ldbu	r2,0(r2)
    42a4:	108003cc 	andi	r2,r2,15
    42a8:	10000b26 	beq	r2,zero,42d8 <main+0xa0>
		Lows++;
    42ac:	d0a02203 	ldbu	r2,-32632(gp)
	switch (stages) {
    42b0:	d0e02117 	ldw	r3,-32636(gp)
		Highs = 0;
    42b4:	d0202245 	stb	zero,-32631(gp)
		Lows++;
    42b8:	10800044 	addi	r2,r2,1
    42bc:	d0a02205 	stb	r2,-32632(gp)
	switch (stages) {
    42c0:	1800051e 	bne	r3,zero,42d8 <main+0xa0>
			if(Lows >= DebounceDelay)
    42c4:	10803fcc 	andi	r2,r2,255
    42c8:	108003f0 	cmpltui	r2,r2,15
    42cc:	1000021e 	bne	r2,zero,42d8 <main+0xa0>
				stages = WaitingHighs;
    42d0:	00800044 	movi	r2,1
    42d4:	d0a02115 	stw	r2,-32636(gp)
	if(*btnPressed == ClearTX)
    42d8:	d0a02717 	ldw	r2,-32612(gp)
    42dc:	10c00118 	cmpnei	r3,r2,4
    42e0:	18002a1e 	bne	r3,zero,438c <main+0x154>
	*TXLCDReg = WordTX;
    42e4:	d0a00a17 	ldw	r2,-32728(gp)
		WordTX = 0;
    42e8:	d0202015 	stw	zero,-32640(gp)
		ByteCounter = 0;
    42ec:	d0201f05 	stb	zero,-32644(gp)
		stages = Waiting32BitsSel;
    42f0:	d0201e15 	stw	zero,-32648(gp)
	*TXLCDReg = WordTX;
    42f4:	10000015 	stw	zero,0(r2)
	if(TurnOffIncomData)
    42f8:	d0a01d17 	ldw	r2,-32652(gp)
    42fc:	10000e26 	beq	r2,zero,4338 <main+0x100>
		if(CountIncomData >= IncomDataTime)
    4300:	d0a01c0f 	ldh	r2,-32656(gp)
    4304:	10807d10 	cmplti	r2,r2,500
    4308:	1000081e 	bne	r2,zero,432c <main+0xf4>
	alt_u8 Port = *StatusLed;
    430c:	d0e00417 	ldw	r3,-32752(gp)
			TurnOffIncomData = false;
    4310:	d0201d15 	stw	zero,-32652(gp)
	Port &= ~statusLeds;
    4314:	18800003 	ldbu	r2,0(r3)
    4318:	10803f4c 	andi	r2,r2,253
			*StatusLed = Port|(value<<1);
    431c:	10800094 	ori	r2,r2,2
    4320:	18800005 	stb	r2,0(r3)
			CountIncomData = -1;
    4324:	00bfffc4 	movi	r2,-1
    4328:	d0a01c0d 	sth	r2,-32656(gp)
		CountIncomData++;
    432c:	d0a01c0b 	ldhu	r2,-32656(gp)
    4330:	10800044 	addi	r2,r2,1
    4334:	d0a01c0d 	sth	r2,-32656(gp)
	switch(stages)
    4338:	d0a01b17 	ldw	r2,-32660(gp)
    433c:	10c00060 	cmpeqi	r3,r2,1
    4340:	18000f1e 	bne	r3,zero,4380 <main+0x148>
    4344:	10c000a0 	cmpeqi	r3,r2,2
    4348:	1800461e 	bne	r3,zero,4464 <main+0x22c>
    434c:	10000c1e 	bne	r2,zero,4380 <main+0x148>
			if(DataRX)
    4350:	d0e02517 	ldw	r3,-32620(gp)
			EnableReception = true;
    4354:	00800044 	movi	r2,1
    4358:	d0a00015 	stw	r2,-32768(gp)
			CountsDelay = 0;
    435c:	d0201a05 	stb	zero,-32664(gp)
			WordRX = 0;
    4360:	d0202915 	stw	zero,-32604(gp)
			if(DataRX)
    4364:	18000626 	beq	r3,zero,4380 <main+0x148>
	alt_u8 Port = *StatusLed;
    4368:	d0e00417 	ldw	r3,-32752(gp)
				stages = Waiting32Bits;
    436c:	d0a01b15 	stw	r2,-32660(gp)
	Port &= ~statusLeds;
    4370:	18800003 	ldbu	r2,0(r3)
    4374:	10803f4c 	andi	r2,r2,253
			*StatusLed = Port|(value<<1);
    4378:	10800094 	ori	r2,r2,2
    437c:	18800005 	stb	r2,0(r3)
	  ParsedLoopFlag = true;
    4380:	00800044 	movi	r2,1
    4384:	d0a00115 	stw	r2,-32764(gp)
	  while(ParsedLoopFlag); //Parsed Loop period = 1ms
    4388:	003fff06 	br	4388 <main+0x150>
	*TXLCDReg = WordTX;
    438c:	d0e00a17 	ldw	r3,-32728(gp)
    4390:	d1602017 	ldw	r5,-32640(gp)
    4394:	19400015 	stw	r5,0(r3)
	switch(stages)
    4398:	d0e01e17 	ldw	r3,-32648(gp)
    439c:	18001826 	beq	r3,zero,4400 <main+0x1c8>
    43a0:	18c00060 	cmpeqi	r3,r3,1
    43a4:	183fd426 	beq	r3,zero,42f8 <main+0xc0>
	alt_u8 preStartTX = (*StartTX)&(~0x1);
    43a8:	d0e00317 	ldw	r3,-32756(gp)
			UARTSend((alt_u8)WordTX&(0xFF<<ByteCounter));
    43ac:	d0a01f03 	ldbu	r2,-32644(gp)
	alt_u8 preStartTX = (*StartTX)&(~0x1);
    43b0:	19000003 	ldbu	r4,0(r3)
			UARTSend((alt_u8)WordTX&(0xFF<<ByteCounter));
    43b4:	11803fcc 	andi	r6,r2,255
    43b8:	00c03fc4 	movi	r3,255
    43bc:	1986983a 	sll	r3,r3,r6
	alt_u8 preStartTX = (*StartTX)&(~0x1);
    43c0:	21003f8c 	andi	r4,r4,254
			ByteCounter++;
    43c4:	10800044 	addi	r2,r2,1
			UARTSend((alt_u8)WordTX&(0xFF<<ByteCounter));
    43c8:	1946703a 	and	r3,r3,r5
	*TXDataReg = DataTX;
    43cc:	d1600817 	ldw	r5,-32736(gp)
			ByteCounter++;
    43d0:	d0a01f05 	stb	r2,-32644(gp)
			if(ByteCounter >= 3)
    43d4:	10803fcc 	andi	r2,r2,255
	*TXDataReg = DataTX;
    43d8:	28c00005 	stb	r3,0(r5)
	*StartTX = (preStartTX|1);
    43dc:	d0e00317 	ldw	r3,-32756(gp)
    43e0:	21400054 	ori	r5,r4,1
			if(ByteCounter >= 3)
    43e4:	108000f0 	cmpltui	r2,r2,3
	*StartTX = (preStartTX|1);
    43e8:	19400005 	stb	r5,0(r3)
	*StartTX = (preStartTX|0);
    43ec:	d0e00317 	ldw	r3,-32756(gp)
    43f0:	19000005 	stb	r4,0(r3)
			if(ByteCounter >= 3)
    43f4:	103fc01e 	bne	r2,zero,42f8 <main+0xc0>
				stages = Waiting32BitsSel;
    43f8:	d0201e15 	stw	zero,-32648(gp)
    43fc:	00001706 	br	445c <main+0x224>
			if(*btnPressed == SetData)
    4400:	10c00058 	cmpnei	r3,r2,1
    4404:	1800111e 	bne	r3,zero,444c <main+0x214>
				WordTX |= (alt_u32) *TXDataSel<<(8*ByteCounter);
    4408:	d0a01f03 	ldbu	r2,-32644(gp)
    440c:	d0e00617 	ldw	r3,-32744(gp)
    4410:	11003fcc 	andi	r4,r2,255
    4414:	200890fa 	slli	r4,r4,3
    4418:	18c00003 	ldbu	r3,0(r3)
				ByteCounter++;
    441c:	10800044 	addi	r2,r2,1
				WordTX |= (alt_u32) *TXDataSel<<(8*ByteCounter);
    4420:	1906983a 	sll	r3,r3,r4
				ByteCounter++;
    4424:	1009883a 	mov	r4,r2
				if(ByteCounter >= 3)
    4428:	10803fcc 	andi	r2,r2,255
    442c:	108000e8 	cmpgeui	r2,r2,3
				WordTX |= (alt_u32) *TXDataSel<<(8*ByteCounter);
    4430:	1946b03a 	or	r3,r3,r5
				if(ByteCounter >= 3)
    4434:	10000126 	beq	r2,zero,443c <main+0x204>
    4438:	0009883a 	mov	r4,zero
				WordTX |= (alt_u32) *TXDataSel<<(8*ByteCounter);
    443c:	d0e02015 	stw	r3,-32640(gp)
				ByteCounter++;
    4440:	d1201f05 	stb	r4,-32644(gp)
				*btnPressed = None;
    4444:	d0202715 	stw	zero,-32612(gp)
    4448:	003fab06 	br	42f8 <main+0xc0>
			else if(*btnPressed == SendTX)
    444c:	108000a0 	cmpeqi	r2,r2,2
    4450:	103fa926 	beq	r2,zero,42f8 <main+0xc0>
				stages = SendState;
    4454:	00800044 	movi	r2,1
    4458:	d0a01e15 	stw	r2,-32648(gp)
				ByteCounter = 0;
    445c:	d0201f05 	stb	zero,-32644(gp)
    4460:	003fa506 	br	42f8 <main+0xc0>
			if(!needToClearTX) //TODO
    4464:	d0a02317 	ldw	r2,-32628(gp)
    4468:	1000031e 	bne	r2,zero,4478 <main+0x240>
				*TXLCDReg = WordRX; //Takes 3ms to get here if delay
    446c:	d0e02917 	ldw	r3,-32604(gp)
    4470:	d0a00a17 	ldw	r2,-32728(gp)
    4474:	10c00015 	stw	r3,0(r2)
			DataRX = false;
    4478:	d0202515 	stw	zero,-32620(gp)
		break;
    447c:	003fc006 	br	4380 <main+0x148>

00004480 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4480:	000450c1 	jmpi	450c <alt_iic_isr_register>

00004484 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    4484:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4488:	00bfff84 	movi	r2,-2
    448c:	1884703a 	and	r2,r3,r2
    4490:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    4494:	00800044 	movi	r2,1
    4498:	d1202c17 	ldw	r4,-32592(gp)
    449c:	114a983a 	sll	r5,r2,r5
    44a0:	290ab03a 	or	r5,r5,r4
    44a4:	d1602c15 	stw	r5,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    44a8:	d0a02c17 	ldw	r2,-32592(gp)
    44ac:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    44b0:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    44b4:	0005883a 	mov	r2,zero
    44b8:	f800283a 	ret

000044bc <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    44bc:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    44c0:	00bfff84 	movi	r2,-2
    44c4:	1884703a 	and	r2,r3,r2
    44c8:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    44cc:	00bfff84 	movi	r2,-2
    44d0:	d1202c17 	ldw	r4,-32592(gp)
    44d4:	114a183a 	rol	r5,r2,r5
    44d8:	290a703a 	and	r5,r5,r4
    44dc:	d1602c15 	stw	r5,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    44e0:	d0a02c17 	ldw	r2,-32592(gp)
    44e4:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    44e8:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    44ec:	0005883a 	mov	r2,zero
    44f0:	f800283a 	ret

000044f4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    44f4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    44f8:	00800044 	movi	r2,1
    44fc:	1144983a 	sll	r2,r2,r5
    4500:	10c4703a 	and	r2,r2,r3
}
    4504:	1004c03a 	cmpne	r2,r2,zero
    4508:	f800283a 	ret

0000450c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    450c:	28800808 	cmpgei	r2,r5,32
    4510:	1000161e 	bne	r2,zero,456c <alt_iic_isr_register+0x60>
{
    4514:	defffe04 	addi	sp,sp,-8
    4518:	dfc00115 	stw	ra,4(sp)
    451c:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    4520:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4524:	00bfff84 	movi	r2,-2
    4528:	8084703a 	and	r2,r16,r2
    452c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    4530:	280690fa 	slli	r3,r5,3
    4534:	00800034 	movhi	r2,0
    4538:	10921f04 	addi	r2,r2,18556
    453c:	10c5883a 	add	r2,r2,r3
    4540:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    4544:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4548:	30000626 	beq	r6,zero,4564 <alt_iic_isr_register+0x58>
    454c:	00044840 	call	4484 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    4550:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    4554:	dfc00117 	ldw	ra,4(sp)
    4558:	dc000017 	ldw	r16,0(sp)
    455c:	dec00204 	addi	sp,sp,8
    4560:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4564:	00044bc0 	call	44bc <alt_ic_irq_disable>
    4568:	003ff906 	br	4550 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    456c:	00bffa84 	movi	r2,-22
}
    4570:	f800283a 	ret

00004574 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4574:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4578:	01000034 	movhi	r4,0
    457c:	01400034 	movhi	r5,0
    4580:	dfc00015 	stw	ra,0(sp)
    4584:	2111ee04 	addi	r4,r4,18360
    4588:	2951fb04 	addi	r5,r5,18412
    458c:	21400426 	beq	r4,r5,45a0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    4590:	01800034 	movhi	r6,0
    4594:	3191fb04 	addi	r6,r6,18412
    4598:	310dc83a 	sub	r6,r6,r4
    459c:	000475c0 	call	475c <memcpy>
  if (to != from)
    45a0:	01000034 	movhi	r4,0
    45a4:	01400034 	movhi	r5,0
    45a8:	21100804 	addi	r4,r4,16416
    45ac:	29500804 	addi	r5,r5,16416
    45b0:	21400426 	beq	r4,r5,45c4 <alt_load+0x50>
      *to++ = *from++;
    45b4:	01800034 	movhi	r6,0
    45b8:	31906204 	addi	r6,r6,16776
    45bc:	310dc83a 	sub	r6,r6,r4
    45c0:	000475c0 	call	475c <memcpy>
  if (to != from)
    45c4:	01000034 	movhi	r4,0
    45c8:	01400034 	movhi	r5,0
    45cc:	2111e804 	addi	r4,r4,18336
    45d0:	2951e804 	addi	r5,r5,18336
    45d4:	21400426 	beq	r4,r5,45e8 <alt_load+0x74>
      *to++ = *from++;
    45d8:	01800034 	movhi	r6,0
    45dc:	3191ee04 	addi	r6,r6,18360
    45e0:	310dc83a 	sub	r6,r6,r4
    45e4:	000475c0 	call	475c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    45e8:	00046b00 	call	46b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    45ec:	dfc00017 	ldw	ra,0(sp)
    45f0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    45f4:	00046c81 	jmpi	46c8 <alt_icache_flush_all>

000045f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    45f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    45fc:	0009883a 	mov	r4,zero
{
    4600:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    4604:	000465c0 	call	465c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4608:	000467c0 	call	467c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    460c:	d1a02d17 	ldw	r6,-32588(gp)
    4610:	d1602e17 	ldw	r5,-32584(gp)
    4614:	d1202f17 	ldw	r4,-32580(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4618:	dfc00017 	ldw	ra,0(sp)
    461c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    4620:	00042381 	jmpi	4238 <main>

00004624 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4624:	defffe04 	addi	sp,sp,-8
    4628:	dc000015 	stw	r16,0(sp)
    462c:	dfc00115 	stw	ra,4(sp)
    4630:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4634:	00047840 	call	4784 <strlen>
    4638:	01000034 	movhi	r4,0
    463c:	000f883a 	mov	r7,zero
    4640:	100d883a 	mov	r6,r2
    4644:	800b883a 	mov	r5,r16
    4648:	2111fa04 	addi	r4,r4,18408
#else
    return fputs(str, stdout);
#endif
#endif
}
    464c:	dfc00117 	ldw	ra,4(sp)
    4650:	dc000017 	ldw	r16,0(sp)
    4654:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4658:	00046801 	jmpi	4680 <altera_avalon_jtag_uart_write>

0000465c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    465c:	deffff04 	addi	sp,sp,-4
    4660:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    4664:	00046f80 	call	46f8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4668:	00800044 	movi	r2,1
    466c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4670:	dfc00017 	ldw	ra,0(sp)
    4674:	dec00104 	addi	sp,sp,4
    4678:	f800283a 	ret

0000467c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    467c:	f800283a 	ret

00004680 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4680:	20c00017 	ldw	r3,0(r4)
{
    4684:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    4688:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    468c:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    4690:	29000136 	bltu	r5,r4,4698 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    4694:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4698:	19c00137 	ldwio	r7,4(r3)
    469c:	31fffc2e 	bgeu	r6,r7,4690 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    46a0:	29c00007 	ldb	r7,0(r5)
    46a4:	29400044 	addi	r5,r5,1
    46a8:	19c00035 	stwio	r7,0(r3)
    46ac:	003ff806 	br	4690 <altera_avalon_jtag_uart_write+0x10>

000046b0 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    46b0:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    46b4:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    46b8:	10800804 	addi	r2,r2,32
    46bc:	10c20018 	cmpnei	r3,r2,2048
    46c0:	183ffc1e 	bne	r3,zero,46b4 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    46c4:	f800283a 	ret

000046c8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    46c8:	01440004 	movi	r5,4096
    46cc:	0009883a 	mov	r4,zero
    46d0:	00047001 	jmpi	4700 <alt_icache_flush>

000046d4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    46d4:	213ffe84 	addi	r4,r4,-6
    46d8:	20800428 	cmpgeui	r2,r4,16
    46dc:	1000041e 	bne	r2,zero,46f0 <alt_exception_cause_generated_bad_addr+0x1c>
    46e0:	00a2c8d4 	movui	r2,35619
    46e4:	1104d83a 	srl	r2,r2,r4
    46e8:	1080004c 	andi	r2,r2,1
    46ec:	f800283a 	ret
    46f0:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
    46f4:	f800283a 	ret

000046f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    46f8:	000170fa 	wrctl	ienable,zero
}
    46fc:	f800283a 	ret

00004700 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    4700:	28840070 	cmpltui	r2,r5,4097
    4704:	1000011e 	bne	r2,zero,470c <alt_icache_flush+0xc>
    4708:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    470c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4710:	2005883a 	mov	r2,r4
    4714:	11400c36 	bltu	r2,r5,4748 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4718:	208007cc 	andi	r2,r4,31
    471c:	10000826 	beq	r2,zero,4740 <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4720:	20bff844 	addi	r2,r4,-31
    4724:	28800b36 	bltu	r5,r2,4754 <alt_icache_flush+0x54>
    4728:	290bc83a 	sub	r5,r5,r4
    472c:	294007c4 	addi	r5,r5,31
    4730:	280ad17a 	srli	r5,r5,5
    4734:	280a917a 	slli	r5,r5,5
    4738:	2149883a 	add	r4,r4,r5
    473c:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    4740:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4744:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4748:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    474c:	10800804 	addi	r2,r2,32
    4750:	003ff006 	br	4714 <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
    4754:	000b883a 	mov	r5,zero
    4758:	003ff706 	br	4738 <alt_icache_flush+0x38>

0000475c <memcpy>:
    475c:	2005883a 	mov	r2,r4
    4760:	0007883a 	mov	r3,zero
    4764:	30c0011e 	bne	r6,r3,476c <memcpy+0x10>
    4768:	f800283a 	ret
    476c:	28cf883a 	add	r7,r5,r3
    4770:	39c00003 	ldbu	r7,0(r7)
    4774:	10c9883a 	add	r4,r2,r3
    4778:	18c00044 	addi	r3,r3,1
    477c:	21c00005 	stb	r7,0(r4)
    4780:	003ff806 	br	4764 <memcpy+0x8>

00004784 <strlen>:
    4784:	2005883a 	mov	r2,r4
    4788:	10c00007 	ldb	r3,0(r2)
    478c:	1800021e 	bne	r3,zero,4798 <strlen+0x14>
    4790:	1105c83a 	sub	r2,r2,r4
    4794:	f800283a 	ret
    4798:	10800044 	addi	r2,r2,1
    479c:	003ffa06 	br	4788 <strlen+0x4>
