
UART_LCD.elf:     file format elf32-littlenios2
UART_LCD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000284 memsz 0x00000284 flags r-x
    LOAD off    0x000012a4 vaddr 0x000042a4 paddr 0x000042a8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000002ac vaddr 0x000042ac paddr 0x000042ac align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000012a8  2**0
                  CONTENTS
  2 .text         0000026c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000428c  0000428c  0000128c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000042a4  000042a8  000012a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000042ac  000042ac  000012ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000042b8  000042b8  000012a8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001a8  00000000  00000000  000012d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000cbf  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000087c  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000006cb  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001cc  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000003cb  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  00003620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00003650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006f  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000561  00000000  00000000  000036df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 0000026c  00000000  00000000  00003c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00004d0e  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00004d11  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00004d1e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00004d1f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00004d2a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00004d35  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003d  00000000  00000000  00004d45  2**0
                  CONTENTS, READONLY
 28 .jdi          000050b3  00000000  00000000  00004d82  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0007e5fb  00000000  00000000  00009e35  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000428c l    d  .rodata	00000000 .rodata
000042a4 l    d  .rwdata	00000000 .rwdata
000042ac l    d  .bss	00000000 .bss
000042b8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00004108 g     F .text	0000002c alt_main
000042a8 g       *ABS*	00000000 __flash_rwdata_start
00004134 g     F .text	00000038 alt_putstr
000041e4 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000042b0 g     O .bss	00000004 alt_argv
0000c2a4 g       *ABS*	00000000 _gp
00004248 g     F .text	00000028 memcpy
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000041ec g     F .text	0000005c alt_icache_flush
000042b8 g       *ABS*	00000000 __bss_end
000041c0 g     F .text	00000018 alt_dcache_flush_all
000042a8 g       *ABS*	00000000 __ram_rwdata_end
000042a4 g       *ABS*	00000000 __ram_rodata_end
000042a4 g     O .rwdata	00000004 jtag_uart_0
000042b8 g       *ABS*	00000000 end
00006800 g       *ABS*	00000000 __alt_stack_pointer
00004190 g     F .text	00000030 altera_avalon_jtag_uart_write
00004020 g     F .text	0000004c _start
0000418c g     F .text	00000004 alt_sys_init
000042a4 g       *ABS*	00000000 __ram_rwdata_start
0000428c g       *ABS*	00000000 __ram_rodata_start
000042b8 g       *ABS*	00000000 __alt_stack_base
000042ac g       *ABS*	00000000 __bss_start
0000406c g     F .text	00000018 main
000042ac g     O .bss	00000004 alt_envp
0000428c g       *ABS*	00000000 __flash_rodata_start
0000416c g     F .text	00000020 alt_irq_init
000042b4 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000042a8 g       *ABS*	00000000 _edata
000042b8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00006800 g       *ABS*	00000000 __alt_data_end
0000401c g       .entry	00000000 _exit
00004270 g     F .text	0000001c strlen
000041d8 g     F .text	0000000c alt_icache_flush_all
00004084 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__reset-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    402c:	00bffd16 	blt	zero,r2,4024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4034:	deda0014 	ori	sp,sp,26624
    movhi gp, %hi(_gp)
    4038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    403c:	d6b0a914 	ori	gp,gp,49828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4044:	1090ab14 	ori	r2,r2,17068

    movhi r3, %hi(__bss_end)
    4048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    404c:	18d0ae14 	ori	r3,r3,17080

    beq r2, r3, 1f
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>

0:
    stw zero, (r2)
    4054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    405c:	10fffd36 	bltu	r2,r3,4054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4060:	00040840 	call	4084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4064:	00041080 	call	4108 <alt_main>

00004068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4068:	003fff06 	br	4068 <alt_after_alt_main>

0000406c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    406c:	01000034 	movhi	r4,0
{ 
    4070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    4074:	2110a304 	addi	r4,r4,17036
{ 
    4078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    407c:	00041340 	call	4134 <alt_putstr>

  /* Event loop never exits. */
  while (1);
    4080:	003fff06 	br	4080 <main+0x14>

00004084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4084:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4088:	01000034 	movhi	r4,0
    408c:	01400034 	movhi	r5,0
    4090:	dfc00015 	stw	ra,0(sp)
    4094:	2110a904 	addi	r4,r4,17060
    4098:	2950aa04 	addi	r5,r5,17064
    409c:	21400426 	beq	r4,r5,40b0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    40a0:	01800034 	movhi	r6,0
    40a4:	3190aa04 	addi	r6,r6,17064
    40a8:	310dc83a 	sub	r6,r6,r4
    40ac:	00042480 	call	4248 <memcpy>
  if (to != from)
    40b0:	01000034 	movhi	r4,0
    40b4:	01400034 	movhi	r5,0
    40b8:	21100804 	addi	r4,r4,16416
    40bc:	29500804 	addi	r5,r5,16416
    40c0:	21400426 	beq	r4,r5,40d4 <alt_load+0x50>
      *to++ = *from++;
    40c4:	01800034 	movhi	r6,0
    40c8:	31900804 	addi	r6,r6,16416
    40cc:	310dc83a 	sub	r6,r6,r4
    40d0:	00042480 	call	4248 <memcpy>
  if (to != from)
    40d4:	01000034 	movhi	r4,0
    40d8:	01400034 	movhi	r5,0
    40dc:	2110a304 	addi	r4,r4,17036
    40e0:	2950a304 	addi	r5,r5,17036
    40e4:	21400426 	beq	r4,r5,40f8 <alt_load+0x74>
      *to++ = *from++;
    40e8:	01800034 	movhi	r6,0
    40ec:	3190a904 	addi	r6,r6,17060
    40f0:	310dc83a 	sub	r6,r6,r4
    40f4:	00042480 	call	4248 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    40f8:	00041c00 	call	41c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    40fc:	dfc00017 	ldw	ra,0(sp)
    4100:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    4104:	00041d81 	jmpi	41d8 <alt_icache_flush_all>

00004108 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4108:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    410c:	0009883a 	mov	r4,zero
{
    4110:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    4114:	000416c0 	call	416c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4118:	000418c0 	call	418c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    411c:	d1a00217 	ldw	r6,-32760(gp)
    4120:	d1600317 	ldw	r5,-32756(gp)
    4124:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4128:	dfc00017 	ldw	ra,0(sp)
    412c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    4130:	000406c1 	jmpi	406c <main>

00004134 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4134:	defffe04 	addi	sp,sp,-8
    4138:	dc000015 	stw	r16,0(sp)
    413c:	dfc00115 	stw	ra,4(sp)
    4140:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4144:	00042700 	call	4270 <strlen>
    4148:	01000034 	movhi	r4,0
    414c:	000f883a 	mov	r7,zero
    4150:	100d883a 	mov	r6,r2
    4154:	800b883a 	mov	r5,r16
    4158:	2110a904 	addi	r4,r4,17060
#else
    return fputs(str, stdout);
#endif
#endif
}
    415c:	dfc00117 	ldw	ra,4(sp)
    4160:	dc000017 	ldw	r16,0(sp)
    4164:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4168:	00041901 	jmpi	4190 <altera_avalon_jtag_uart_write>

0000416c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    416c:	deffff04 	addi	sp,sp,-4
    4170:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    4174:	00041e40 	call	41e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4178:	00800044 	movi	r2,1
    417c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4180:	dfc00017 	ldw	ra,0(sp)
    4184:	dec00104 	addi	sp,sp,4
    4188:	f800283a 	ret

0000418c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    418c:	f800283a 	ret

00004190 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4190:	20c00017 	ldw	r3,0(r4)
{
    4194:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    4198:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    419c:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    41a0:	29000136 	bltu	r5,r4,41a8 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    41a4:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    41a8:	19c00137 	ldwio	r7,4(r3)
    41ac:	31fffc2e 	bgeu	r6,r7,41a0 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    41b0:	29c00007 	ldb	r7,0(r5)
    41b4:	29400044 	addi	r5,r5,1
    41b8:	19c00035 	stwio	r7,0(r3)
    41bc:	003ff806 	br	41a0 <altera_avalon_jtag_uart_write+0x10>

000041c0 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    41c0:	0005883a 	mov	r2,zero
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    41c4:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    41c8:	10800804 	addi	r2,r2,32
    41cc:	10c20018 	cmpnei	r3,r2,2048
    41d0:	183ffc1e 	bne	r3,zero,41c4 <alt_dcache_flush_all+0x4>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    41d4:	f800283a 	ret

000041d8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    41d8:	01440004 	movi	r5,4096
    41dc:	0009883a 	mov	r4,zero
    41e0:	00041ec1 	jmpi	41ec <alt_icache_flush>

000041e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    41e4:	000170fa 	wrctl	ienable,zero
}
    41e8:	f800283a 	ret

000041ec <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    41ec:	28840070 	cmpltui	r2,r5,4097
    41f0:	1000011e 	bne	r2,zero,41f8 <alt_icache_flush+0xc>
    41f4:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    41f8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    41fc:	2005883a 	mov	r2,r4
    4200:	11400c36 	bltu	r2,r5,4234 <alt_icache_flush+0x48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4204:	208007cc 	andi	r2,r4,31
    4208:	10000826 	beq	r2,zero,422c <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    420c:	20bff844 	addi	r2,r4,-31
    4210:	28800b36 	bltu	r5,r2,4240 <alt_icache_flush+0x54>
    4214:	290bc83a 	sub	r5,r5,r4
    4218:	294007c4 	addi	r5,r5,31
    421c:	280ad17a 	srli	r5,r5,5
    4220:	280a917a 	slli	r5,r5,5
    4224:	2149883a 	add	r4,r4,r5
    4228:	2000603a 	flushi	r4
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    422c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4230:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4234:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4238:	10800804 	addi	r2,r2,32
    423c:	003ff006 	br	4200 <alt_icache_flush+0x14>
    __asm__ volatile ("flushi %0" :: "r" (i));
    4240:	000b883a 	mov	r5,zero
    4244:	003ff706 	br	4224 <alt_icache_flush+0x38>

00004248 <memcpy>:
    4248:	2005883a 	mov	r2,r4
    424c:	0007883a 	mov	r3,zero
    4250:	30c0011e 	bne	r6,r3,4258 <memcpy+0x10>
    4254:	f800283a 	ret
    4258:	28cf883a 	add	r7,r5,r3
    425c:	39c00003 	ldbu	r7,0(r7)
    4260:	10c9883a 	add	r4,r2,r3
    4264:	18c00044 	addi	r3,r3,1
    4268:	21c00005 	stb	r7,0(r4)
    426c:	003ff806 	br	4250 <memcpy+0x8>

00004270 <strlen>:
    4270:	2005883a 	mov	r2,r4
    4274:	10c00007 	ldb	r3,0(r2)
    4278:	1800021e 	bne	r3,zero,4284 <strlen+0x14>
    427c:	1105c83a 	sub	r2,r2,r4
    4280:	f800283a 	ret
    4284:	10800044 	addi	r2,r2,1
    4288:	003ffa06 	br	4274 <strlen+0x4>
